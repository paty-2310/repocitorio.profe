Explicación de Cómo se Almacenan los Datos

Ahora, vamos a desglosar el JSON anterior parte por parte.

1. El Objeto Principal: { ... }
--------------------------------
Todo el contenido está envuelto en llaves {}. Esto significa que el documento completo es un objeto JSON, que es la estructura fundamental. Piensa en ello como el contenedor principal para la información de un solo registro (en este caso, un usuario).

2. Pares Clave-Valor: "clave": valor
-------------------------------------
Dentro del objeto, los datos se almacenan en pares clave-valor.

- La clave (a la izquierda de los dos puntos) es siempre un texto entre comillas dobles que actúa como el nombre del dato. Por ejemplo: "idUsuario", "nombreCompleto".
- El valor (a la derecha) es el dato en sí. Puede ser de diferentes tipos.

3. Tipos de Datos Simples
--------------------------
- "idUsuario": "usr_1a2b3c4d" → **String (Texto):** El valor es una cadena de caracteres, siempre entre comillas dobles.
- "activo": true → **Boolean (Booleano):** El valor solo puede ser true o false (sin comillas). Es perfecto para indicar estados.
- "ultimaConexion": null → **Null (Nulo):** Representa la ausencia de un valor. Es útil para campos opcionales que aún no se han llenado.

4. Arrays (Listas): [ ... ]
----------------------------
Cuando una clave necesita almacenar una lista de valores, se usan los corchetes [].

Ejemplo:
"intereses": [ "lectura", "senderismo", "fotografía" ]

En este caso, "intereses" contiene una lista de strings (textos). Esto es mucho más flexible que en una base de datos relacional, donde necesitarías una tabla separada.

5. Objetos Anidados: { ... } dentro de otro { ... }
----------------------------------------------------
El valor de una clave puede ser otro objeto JSON completo. Esto es increíblemente poderoso para agrupar datos relacionados.

Ejemplo:
"perfil": { ... }

Aquí, toda la información del perfil (edad, ciudad, descripcion) está organizada bajo la clave "perfil". Esto crea una jerarquía clara.

Dentro de este objeto anidado, también hay pares clave-valor, como "edad": 29, que es un valor de tipo Number (Número) (van sin comillas).

6. Arrays de Objetos: [ { ... }, { ... } ]
-------------------------------------------
Esta es la combinación más avanzada y común. Es una lista (indicada por los corchetes []) donde cada elemento de la lista es, a su vez, un objeto completo (indicado por las llaves {}).

Ejemplo:
"historialPedidos": [ ... ]

En el ejemplo, "historialPedidos" es una lista. El primer elemento es un objeto que representa el pedido "ped_9y8x7w", con sus propios datos (fecha, total). El segundo elemento es otro objeto para el pedido "ped_6v5u4t".

Incluso dentro de estos objetos, podemos tener más niveles de anidación, como la lista "items" dentro de cada pedido.

Resumen
--------
La estructura JSON te permite anidar información de forma lógica y flexible, agrupando datos relacionados bajo claves y usando listas para colecciones de elementos, todo dentro de un único documento autocontenido.